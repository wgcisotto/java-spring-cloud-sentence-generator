<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.wgcisotto</groupId>
	<artifactId>sentence-server</artifactId>
	<version>0.0.1</version>
	<packaging>jar</packaging>

	<name>sentence-service</name>
	<description>Sentence Service</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Greenwich.SR2</spring-cloud.version>
		<docker.image.prefix>wgcisotto</docker.image.prefix>
		<!--<spring-boot-admin.version>2.1.5</spring-boot-admin.version>-->
	</properties>

	<!-- We can't have two parent POMs, so use DependencyManagement
	to show Maven where the Spring Cloud dependencies are. -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!--<dependency>-->
			<!--<groupId>de.codecentric</groupId>-->
			<!--<artifactId>spring-boot-admin-dependencies</artifactId>-->
			<!--<version>${spring-boot-admin.version}</version>-->
			<!--<type>pom</type>-->
			<!--<scope>import</scope>-->
			<!--</dependency>-->
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Needed since 1.0.2 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-ribbon -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-ribbon</artifactId>
			<version>1.2.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Allow for automatic restarts when classpath contents change. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!--<scope>runtime</scope>-->
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
			<version>1.1.5.RELEASE</version>
		</dependency>

		<!-- sleuth -->
		<!--

		This dependency will pull in all the core libraries needed for Spring Cloud Sleuth.
		Thatâ€™s it. Once this dependency is pulled in, your service will now
			1 Inspect every incoming HTTP service and determine whether or
				a not Spring Cloud Sleuth tracing information exists in the incoming call.
			  If the Spring Cloud Sleuth tracing data does exist, the tracing information passed into your
			  	microservice will be captured and made available to your service for logging and processing.
			2 Add Spring Cloud Sleuth tracing information to the Spring MDC so that every log statement created by
				your microservice will be added to the logs.
			3 Inject Spring Cloud tracing information into to every outbound HTTP call and
				Spring messaging channel message your service makes.

		-->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>

		<!--<dependency>-->
		<!--<groupId>de.codecentric</groupId>-->
		<!--<artifactId>spring-boot-admin-starter-client</artifactId>-->
		<!--</dependency>-->

		<!--<dependency>-->
		<!--<groupId>org.springframework.boot</groupId>-->
		<!--<artifactId>spring-boot-starter-security</artifactId>-->
		<!--</dependency>-->

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<!--<execution>-->
					<!--<id>default</id>-->
					<!--<phase>install</phase>-->
					<!--<goals>-->
					<!--<goal>build</goal>-->
					<!--<goal>push</goal>-->
					<!--</goals>-->
					<!--</execution>-->
				</executions>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.9</version>
				<configuration>
					<repository>${docker.image.prefix}/${artifactId}</repository>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.2</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- attached to Maven test phase -->
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
